/*
// Materia: Programación I, Paralelo 1
// Autor: Grover Rene Apaza Massi
// Fecha creación: 12/06/2024
// Fecha modificación: 20/06/2024
// Proyecto Final: Empresa Art-Sol Bolivia, ventas y reportes con C++
// 
*/
#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <map> // para busqueda rapida 

using namespace std;
// estructuras para cada caso
class Usuario 
{
public:
    int ID_usuario;
    string Nombre_usuario;
    string Contraseña;
    string Rol;

    Usuario(int id, string nombre, string contraseña, string rol)
        : ID_usuario(id), Nombre_usuario(nombre), Contraseña(contraseña), Rol(rol) {}
};

class Producto 
{
public:
    int ID_producto;
    string Nombre_producto;
    string Descripcion;
    string Talla;
    string Color;
    float Precio;
    string Proveedor;
    int Stock;

    Producto(int id, string nombre, string descripcion, string talla, string color, float precio, string proveedor, int stock)
        : ID_producto(id), Nombre_producto(nombre), Descripcion(descripcion), Talla(talla), Color(color), Precio(precio), Proveedor(proveedor), Stock(stock) {}
};

class Venta 
{
public:
    int ID_venta;
    string Fecha_venta;
    int ID_cliente;
    float Total_venta;

    Venta(int id, string fecha, int id_cliente, float total)
        : ID_venta(id), Fecha_venta(fecha), ID_cliente(id_cliente), Total_venta(total) {}
};

class DetalleVenta 
{
public:
    int ID_detalle;
    int ID_venta;
    int ID_producto;
    int Cantidad;
    float Precio_unitario;

    DetalleVenta(int id_detalle, int id_venta, int id_producto, int cantidad, float precio_unitario)
        : ID_detalle(id_detalle), ID_venta(id_venta), ID_producto(id_producto), Cantidad(cantidad), Precio_unitario(precio_unitario) {}
};

class Cliente 
{
public:
    int ID_cliente;
    string Nombre;
    string Apellido;
    string Email;
    string Telefono;
    string Direccion;

    Cliente(int id, string nombre, string apellido, string email, string telefono, string direccion)
        : ID_cliente(id), Nombre(nombre), Apellido(apellido), Email(email), Telefono(telefono), Direccion(direccion) {}
};

class SistemaAutenticacion 
{
private:
    map<string, Usuario> usuarios;

public:
    void agregarUsuario(const Usuario& usuario) 
    {
        usuarios[usuario.Nombre_usuario] = usuario;
    }

    bool autenticar(const string& nombre_usuario, const string& contraseña) 
    {
        if (usuarios.find(nombre_usuario) != usuarios.end()) {
            return usuarios[nombre_usuario].Contraseña == contraseña;
        }
        return false;
    }
};

class SistemaInventario 
{
private:
    vector<Producto> productos;

public:
    void agregarProducto(const Producto& producto) 
    {
        productos.push_back(producto);
    }

    void eliminarProducto(int id_producto) 
    {
        productos.erase(remove_if(productos.begin(), productos.end(), [id_producto](Producto& p) { return p.ID_producto == id_producto; }), productos.end());
    }

    void modificarProducto(const Producto& producto_modificado) 
    {
        for (auto& producto : productos) 
        {
            if (producto.ID_producto == producto_modificado.ID_producto) 
            {
                producto = producto_modificado;
                break;
            }
        }
    }

    void mostrarProductos() 
    {
        for (const auto& producto : productos) 
        {
            cout << "ID: " << producto.ID_producto << ", Nombre: " << producto.Nombre_producto
                << ", Descripcion: " << producto.Descripcion << ", Talla: " << producto.Talla
                << ", Color: " << producto.Color << ", Precio: " << producto.Precio
                << ", Proveedor: " << producto.Proveedor << ", Stock: " << producto.Stock << endl;
        }
    }

    void actualizarStock(int id_producto, int cantidad_vendida) 
    {
        for (auto& producto : productos) 
        {
            if (producto.ID_producto == id_producto) 
            {
                producto.Stock -= cantidad_vendida;
                if (producto.Stock < 5) 
                {
                    cout << "Alerta: Stock bajo para el producto " << producto.Nombre_producto << endl;
                }
                break;
            }
        }
    }
};

class SistemaVentas 
{
private:
    vector<Venta> ventas;
    vector<DetalleVenta> detalles_ventas;

public:
    void registrarVenta(const Venta& venta) 
    {
        ventas.push_back(venta);
    }

    void agregarDetalleVenta(const DetalleVenta& detalle) 
    {
        detalles_ventas.push_back(detalle);
    }

    void mostrarVentas() 
    {
        for (const auto& venta : ventas) 
        {
            cout << "ID Venta: " << venta.ID_venta << ", Fecha: " << venta.Fecha_venta
                << ", ID Cliente: " << venta.ID_cliente << ", Total: " << venta.Total_venta << endl;
        }
    }

    void generarReporteVentasPorProducto(int id_producto) 
    {
        for (const auto& detalle : detalles_ventas) 
        {
            if (detalle.ID_producto == id_producto) 
            {
                cout << "ID Venta: " << detalle.ID_venta << ", ID Producto: " << detalle.ID_producto
                    << ", Cantidad: " << detalle.Cantidad << ", Precio Unitario: " << detalle.Precio_unitario << endl;
            }
        }
    }

    void generarReporteVentasPorCliente(int id_cliente) 
    {
        for (const auto& venta : ventas) 
        {
            if (venta.ID_cliente == id_cliente) 
            {
                cout << "ID Venta: " << venta.ID_venta << ", Fecha: " << venta.Fecha_venta
                    << ", Total: " << venta.Total_venta << endl;
            }
        }
    }

    void generarReporteVentasPorPeriodo(const string& fecha_inicio, const string& fecha_fin) 
    {
        for (const auto& venta : ventas) 
        {
            if (venta.Fecha_venta >= fecha_inicio && venta.Fecha_venta <= fecha_fin) 
            {
                cout << "ID Venta: " << venta.ID_venta << ", Fecha: " << venta.Fecha_venta
                    << ", Total: " << venta.Total_venta << endl;
            }
        }
    }
};

class SistemaClientes 
{
private:
    vector<Cliente> clientes;

public:
    void agregarCliente(const Cliente& cliente) 
    {
        clientes.push_back(cliente);
    }

    void mostrarClientes() 
    {
        for (const auto& cliente : clientes) 
        {
            cout << "ID: " << cliente.ID_cliente << ", Nombre: " << cliente.Nombre
                << ", Apellido: " << cliente.Apellido << ", Email: " << cliente.Email
                << ", Telefono: " << cliente.Telefono << ", Direccion: " << cliente.Direccion << endl;
        }
    }
};

class Sistema 
{
private:
    SistemaInventario inventario;
    SistemaVentas ventas;
    SistemaClientes clientes;
    SistemaAutenticacion autenticacion;

public:
    void mostrarMenu() 
    {
        cout << "1. Gestion de Inventarios\n";
        cout << "2. Registro de Ventas\n";
        cout << "3. Administracion de Clientes\n";
        cout << "4. Generar Reportes\n";
        cout << "5. Salir\n";
    }

    void mostrarPantallaInventario() 
    {
        int opcion;
        cout << "1. Agregar Producto\n";
        cout << "2. Eliminar Producto\n";
        cout << "3. Modificar Producto\n";
        cout << "4. Mostrar Productos\n";
        cin >> opcion;

        switch(opcion) 
        {
            case 1: 
            {
                int id, stock;
                string nombre, descripcion, talla, color, proveedor;
                float precio;
                cout << "Ingrese ID del producto: ";
                cin >> id;
                cout << "Ingrese nombre del producto: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese descripcion del producto: ";
                getline(cin, descripcion);
                cout << "Ingrese talla del producto: ";
                getline(cin, talla);
                cout << "Ingrese color del producto: ";
                getline(cin, color);
                cout << "Ingrese precio del producto: ";
                cin >> precio;
                cout << "Ingrese proveedor del producto: ";
                cin.ignore();
                getline(cin, proveedor);
                cout << "Ingrese stock del producto: ";
                cin >> stock;
                Producto producto(id, nombre, descripcion, talla, color, precio, proveedor, stock);
                inventario.agregarProducto(producto);
                break;
            }
            case 2: 
            {
                int id;
                cout << "Ingrese ID del producto a eliminar: ";
                cin >> id;
                inventario.eliminarProducto(id);
                break;
            }
            case 3: 
            {
                int id, stock;
                string nombre, descripcion, talla, color, proveedor;
                float precio;
                cout << "Ingrese ID del producto: ";
                cin >> id;
                cout << "Ingrese nombre del producto: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese descripcion del producto: ";
                getline(cin, descripcion);
                cout << "Ingrese talla del producto: ";
                getline(cin, talla);
                cout << "Ingrese color del producto: ";
                getline(cin, color);
                cout << "Ingrese precio del producto: ";
                cin >> precio;
                cout << "Ingrese proveedor del producto: ";
                cin.ignore();
                getline(cin, proveedor);
                cout << "Ingrese stock del producto: ";
                cin >> stock;
                Producto producto(id, nombre, descripcion, talla, color, precio, proveedor, stock);
                inventario.modificarProducto(producto);
                break;
            }
            case 4: 
            {
                inventario.mostrarProductos();
                break;
            }
        }
    }

    void mostrarPantallaVentas() 
    {
        int opcion;
        cout << "1. Registrar Venta\n";
        cout << "2. Mostrar Ventas\n";
        cin >> opcion;

        switch(opcion) 
        {
            case 1: 
            {
                int id_venta, id_cliente, cantidad;
                string fecha;
                float total;
                cout << "Ingrese ID de la venta: ";
                cin >> id_venta;
                cout << "Ingrese fecha de la venta: ";
                cin.ignore();
                getline(cin, fecha);
                cout << "Ingrese ID del cliente: ";
                cin >> id_cliente;
                cout << "Ingrese total de la venta: ";
                cin >> total;
                Venta venta(id_venta, fecha, id_cliente, total);
                ventas.registrarVenta(venta);

                int cantidad_productos;
                cout << "Ingrese cantidad de productos en la venta: ";
                cin >> cantidad_productos;

                for (int i = 0; i < cantidad_productos; i++) 
                {
                    int id_detalle, id_producto, cantidad;
                    float precio_unitario;
                    cout << "Ingrese ID del detalle: ";
                    cin >> id_detalle;
                    cout << "Ingrese ID del producto: ";
                    cin >> id_producto;
                    cout << "Ingrese cantidad del producto: ";
                    cin >> cantidad;
                    cout << "Ingrese precio unitario del producto: ";
                    cin >> precio_unitario;
                    DetalleVenta detalle(id_detalle, id_venta, id_producto, cantidad, precio_unitario);
                    ventas.agregarDetalleVenta(detalle);
                    inventario.actualizarStock(id_producto, cantidad); // Actualizar stock
                }
                break;
            }
            case 2: 
            {
                ventas.mostrarVentas();
                break;
            }
        }
    }

    void mostrarPantallaClientes() 
    {
        int opcion;
        cout << "1. Agregar Cliente\n";
        cout << "2. Mostrar Clientes\n";
        cin >> opcion;

        switch(opcion) 
        {
            case 1: 
            {
                int id;
                string nombre, apellido, email, telefono, direccion;
                cout << "Ingrese ID del cliente: ";
                cin >> id;
                cout << "Ingrese nombre del cliente: ";
                cin.ignore();
                getline(cin, nombre);
                cout << "Ingrese apellido del cliente: ";
                getline(cin, apellido);
                cout << "Ingrese email del cliente: ";
                getline(cin, email);
                cout << "Ingrese telefono del cliente: ";
                getline(cin, telefono);
                cout << "Ingrese direccion del cliente: ";
                getline(cin, direccion);
                Cliente cliente(id, nombre, apellido, email, telefono, direccion);
                clientes.agregarCliente(cliente);
                break;
            }
            case 2: 
            {
                clientes.mostrarClientes();
                break;
            }
        }
    }

    void mostrarPantallaReportes() 
    {
        int opcion;
        cout << "1. Reporte de Ventas por Producto\n";
        cout << "2. Reporte de Ventas por Cliente\n";
        cout << "3. Reporte de Ventas por Periodo\n";
        cin >> opcion;

        switch(opcion) 
        {
            case 1: 
            {
                int id_producto;
                cout << "Ingrese ID del producto: ";
                cin >> id_producto;
                ventas.generarReporteVentasPorProducto(id_producto);
                break;
            }
            case 2: 
            {
                int id_cliente;
                cout << "Ingrese ID del cliente: ";
                cin >> id_cliente;
                ventas.generarReporteVentasPorCliente(id_cliente);
                break;
            }
            case 3: 
            {
                string fecha_inicio, fecha_fin;
                cout << "Ingrese fecha de inicio (YYYY-MM-DD): ";
                cin.ignore();
                getline(cin, fecha_inicio);
                cout << "Ingrese fecha de fin (YYYY-MM-DD): ";
                getline(cin, fecha_fin);
                ventas.generarReporteVentasPorPeriodo(fecha_inicio, fecha_fin);
                break;
            }
        }
    }

    SistemaAutenticacion& getAutenticacion() 
    {
        return autenticacion;
    }
};

// Funcion principal
int main() 
{
    Sistema sistema;

    // Agregar algunos usuarios de ejemplo
    sistema.getAutenticacion().agregarUsuario(Usuario(1, "admin", "admin123", "administrador"));
    sistema.getAutenticacion().agregarUsuario(Usuario(2, "vendedor", "vendedor123", "vendedor"));

    bool autenticado = false;

    while (!autenticado) 
    {
        string usuario, contraseña;
        cout << "Ingrese su usuario: ";
        cin >> usuario;
        cout << "Ingrese su contraseña: ";
        cin >> contraseña;

        if (sistema.getAutenticacion().autenticar(usuario, contraseña))
         {
            autenticado = true;
        } 
        else 
        {
            cout << "Usuario o contraseña incorrectos. Intente de nuevo.\n";
        }
    }

    int opcion;
    do {
        sistema.mostrarMenu();
        cin >> opcion;

        switch(opcion) 
        {
            case 1:
                sistema.mostrarPantallaInventario();
                break;
            case 2:
                sistema.mostrarPantallaVentas();
                break;
            case 3:
                sistema.mostrarPantallaClientes();
                break;
            case 4:
                sistema.mostrarPantallaReportes();
                break;
        }
    } while (opcion != 5);

    return 0;
}
